# github repository actions
name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK (프로젝트 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle permission + build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew 
          ./gradlew build

      - name : make application yml
        if: |
          contains(github.ref, 'master')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.YML_CONTENT }}" > ./application.yml
          shell: bash

      # docker build & push
      - name: Docker build & push to prod
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-act -t ${{ secrets.DOCKER_USERNAME }}/demo .
          docker push ${{ secrets.DOCKER_USERNAME }}/demo


      ## deploy to prod
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.ED_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker-compose down
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/demo
            sudo docker tag ${{secrets.DOCKER_USERNAME}}/demo demo
            sudo docker-compose up -d
            sudo docker image prune -f